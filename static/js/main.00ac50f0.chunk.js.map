{"version":3,"sources":["Button.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","className","id","onClick","clickHandler","text","App","useState","expression","setExpression","currentTerm","setCurrentTerm","numberMode","setNumberMode","history","setHistory","clickNumber","input","test","operators","split","length","pop","clickOperator","charAt","slice","solve","statementToSolve","stmt","parseFloat","num","join","icon","faBackspace","solution","toString","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00ac50f0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Button(props) {\r\n  return (\r\n    <div className=\"button\" id={props.id} onClick={() => props.clickHandler(props.text)}>\r\n      {props.text}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport Button from \"./Button\";\nimport ReactFCCTest from \"react-fcctest\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBackspace } from \"@fortawesome/free-solid-svg-icons\";\n// import { statement } from \"@babel/template\";\n\nfunction App() {\n  const [expression, setExpression] = useState([]);\n  const [currentTerm, setCurrentTerm] = useState(\"0\");\n  const [numberMode, setNumberMode] = useState(true);\n  const [history, setHistory] = useState([]);\n\n  const clickClear = () => {\n    setExpression([]);\n    setCurrentTerm(\"0\");\n    setHistory([]);\n    setNumberMode(true);\n  };\n\n  const clickEquals = () => {\n    const solution = solve([...expression, currentTerm]).toString();\n    setHistory([expression.join(\" \") + \" \" + currentTerm + \" = \" + solution]);\n    setCurrentTerm(solution);\n    setExpression([]);\n  };\n\n  const clickNumber = input => {\n    if (numberMode) {\n      // NUMBER MODE\n      if (/\\./.test(input)) {\n        if (!/\\./.test(currentTerm)) {\n          // decimal input AND currentTerm doesn't already contain a decimal\n          setCurrentTerm(currentTerm + input);\n        }\n      } else {\n        // number input - append it\n        if (currentTerm === \"0\") {\n          // replace 0 with the current input\n          setCurrentTerm(input);\n        } else {\n          setCurrentTerm(currentTerm + input);\n        }\n      }\n    } else {\n      // OPERATOR MODE\n      // number input, switching from operator to number mode\n      const operators = currentTerm.split(\"\");\n      if (currentTerm.length > 1) {\n        if (operators[operators.length - 1] === \"-\") {\n          // if the last operator is '-', move it to the input as a negative sign\n          input = operators.pop() + input;\n        }\n      }\n      // commit the last (non '-') operator to the expression\n      setExpression([...expression, operators[operators.length - 1]]);\n      setNumberMode(true);\n      setCurrentTerm(input);\n\n      if (input === \".\") {\n        // if a decimal input as the first character, preface it with a '0'\n        setCurrentTerm(\"0.\");\n      } else {\n        setCurrentTerm(input);\n      }\n    }\n  };\n\n  const clickOperator = input => {\n    if (numberMode) {\n      // switching from number to operator mode\n      // remove any trailing decimal\n      if (currentTerm.charAt(currentTerm.length - 1) === \".\") {\n        setExpression([...expression, currentTerm.slice(0, currentTerm.length - 1)]);\n      } else {\n        setExpression([...expression, currentTerm]);\n      }\n      setCurrentTerm(input);\n      setNumberMode(false);\n    } else {\n      // OPERATOR MODE - append input to currentTerm\n      setCurrentTerm(currentTerm + input);\n    }\n  };\n\n  const solve = statementToSolve => {\n    // base case\n    const stmt = [...statementToSolve];\n    if (stmt.length === 1) {\n      return parseFloat(stmt[0]);\n    }\n\n    const num = parseFloat(stmt.pop());\n    const op = stmt.pop();\n\n    switch (op) {\n      case \"+\":\n        return solve(stmt) + num;\n      case \"-\":\n        return solve(stmt) - num;\n      case \"×\":\n        stmt[stmt.length - 1] = parseFloat(stmt[stmt.length - 1]) * num;\n        return solve(stmt);\n      case \"÷\":\n        stmt[stmt.length - 1] = parseFloat(stmt[stmt.length - 1]) / num;\n        return solve(stmt);\n      default:\n        return 0;\n    }\n  };\n\n  const clickBackspace = () => {\n    if (currentTerm.length === 1) {\n      if (expression.length === 0) {\n        setExpression([]);\n        setCurrentTerm(\"0\");\n      } else {\n        setCurrentTerm(expression[expression.length - 1]);\n        setExpression(expression.slice(0, expression.length - 1));\n        setNumberMode(!numberMode);\n      }\n    } else {\n      setCurrentTerm(currentTerm.slice(0, currentTerm.length - 1));\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <ReactFCCTest />\n      <div className=\"calculator\">\n        <div id=\"display-container\">\n          <div id=\"history\">{history[0]}</div>\n          <div id=\"display\">{expression.join(\" \") + \" \" + currentTerm}</div>\n          <div id=\"live-calc\">\n            {expression.length > 1\n              ? numberMode\n                ? solve([...expression, currentTerm])\n                : solve(expression)\n              : \"\"}\n          </div>\n        </div>\n        <Button id=\"clear\" text=\"AC\" clickHandler={clickClear} />\n        <Button id=\"divide\" text=\"÷\" clickHandler={clickOperator} />\n        <Button\n          id=\"backspace\"\n          text={<FontAwesomeIcon icon={faBackspace} />}\n          clickHandler={clickBackspace}\n        />\n        <Button id=\"seven\" text=\"7\" clickHandler={clickNumber} />\n        <Button id=\"eight\" text=\"8\" clickHandler={clickNumber} />\n        <Button id=\"nine\" text=\"9\" clickHandler={clickNumber} />\n        <Button id=\"multiply\" text=\"×\" clickHandler={clickOperator} />\n        <Button id=\"four\" text=\"4\" clickHandler={clickNumber} />\n        <Button id=\"five\" text=\"5\" clickHandler={clickNumber} />\n        <Button id=\"six\" text=\"6\" clickHandler={clickNumber} />\n        <Button id=\"subtract\" text=\"-\" clickHandler={clickOperator} />\n        <Button id=\"one\" text=\"1\" clickHandler={clickNumber} />\n        <Button id=\"two\" text=\"2\" clickHandler={clickNumber} />\n        <Button id=\"three\" text=\"3\" clickHandler={clickNumber} />\n        <Button id=\"add\" text=\"+\" clickHandler={clickOperator} />\n        <Button id=\"zero\" text=\"0\" clickHandler={clickNumber} />\n        <Button id=\"decimal\" text=\".\" clickHandler={clickNumber} />\n        <Button id=\"equals\" text=\"=\" clickHandler={clickEquals} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}