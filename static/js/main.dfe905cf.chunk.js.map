{"version":3,"sources":["Button.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","className","id","onClick","clickHandler","text","App","useState","expression","setExpression","currentTerm","setCurrentTerm","currentMode","setCurrentMode","handleClick2","input","solve","test","operators","split","length","pop","stmt","parseFloat","num","join","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dfe905cf.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Button(props) {\r\n  return (\r\n    <div className=\"button\" id={props.id} onClick={() => props.clickHandler(props.text)}>\r\n      {props.text}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport Button from \"./Button\";\nimport ReactFCCTest from \"react-fcctest\";\n\nfunction App() {\n  const [expression, setExpression] = useState([]);\n  const [currentTerm, setCurrentTerm] = useState(0);\n  const [currentMode, setCurrentMode] = useState(\"number\");\n\n  const currentTermtingNumber = () => {\n    const isNumber = /^[0-9.]*$/.test(currentTerm);\n    return isNumber;\n  };\n\n  // move currentTerm to the expression, and toggle the currentMode between \"number\" and \"operator\"\n  const commitInput = () => {\n    setExpression([...expression, currentTerm]);\n    if (currentMode == \"number\") {\n      setCurrentMode(\"operator\");\n    } else {\n      setCurrentMode(\"number\");\n    }\n  };\n\n  const handleClick2 = input => {\n    let newTerm = currentTerm;\n\n    if (input === \"AC\") {\n      setExpression([]);\n      setCurrentTerm(\"0\");\n      setCurrentMode(\"number\");\n      return;\n    }\n\n    if (input === \"=\") {\n      setExpression([]);\n      setCurrentTerm(solve([...expression, currentTerm]));\n      return;\n    }\n    // equation was just solved and input is entered, we'll replace the current currentTerm\n    // if (currentMode == \"solved\" && /^-?[0-9.]*$/.test(input)) {\n    //   console.log(\"Switching from solved to number and blanking currentTerm\");\n    //   setCurrentTerm(\"\");\n    //   setCurrentMode(\"number\");\n    // }\n\n    if (currentMode === \"number\") {\n      // NUMBER MODE\n      if (/[+\\-x/]/.test(input)) {\n        // switching from number to operator mode\n        // TODO: remove any trailing decimal\n        setExpression([...expression, currentTerm]);\n        setCurrentTerm(input);\n        setCurrentMode(\"operator\");\n      } else if (/[0-9]/.test(input)) {\n        // number input - append it\n        if (currentTerm == \"0\") {\n          // replace 0 with the current input\n          setCurrentTerm(input);\n        } else {\n          setCurrentTerm(currentTerm + input);\n        }\n      } else if (!/\\./.test(currentTerm)) {\n        // input decimal AND currentTerm doesn't already contain a decimal\n        setCurrentTerm(currentTerm + input);\n      }\n    } else {\n      // OPERATOR MODE\n      if (/[+\\-x/]/.test(input)) {\n        // operator input, append it to currentTerm\n        setCurrentTerm(currentTerm + input);\n      } else {\n        // number input, switching from operator to number mode\n        const operators = currentTerm.split(\"\");\n        if (currentTerm.length > 1) {\n          if (operators[operators.length - 1] == \"-\") {\n            // if the last operator is '-', move it to the input as a negative sign\n            input = operators.pop() + input;\n          }\n        }\n        // commit the last (non '-') operator to the expression\n        setExpression([...expression, operators[operators.length - 1]]);\n        setCurrentMode(\"number\");\n        setCurrentTerm(input);\n\n        if (input === \".\") {\n          // if a decimal input as the first character, preface it with a '0'\n          setCurrentTerm(\"0.\");\n        } else {\n          setCurrentTerm(input);\n        }\n      }\n    }\n  };\n\n  const handleClick = input => {\n    switch (input) {\n      case \"=\":\n        setExpression([]);\n        setCurrentTerm(solve([...expression, currentTerm]));\n        break;\n      case \"AC\":\n        setExpression([]);\n        setCurrentTerm(\"0\");\n        break;\n      case \".\":\n        if (!currentTermtingNumber()) {\n          setExpression([...expression, currentTerm]);\n          setCurrentTerm(\"0.\");\n        } else if (!/\\./.test(currentTerm)) {\n          setCurrentTerm(currentTerm + \".\");\n        }\n        break;\n      case \"-\":\n        if (\n          currentTermtingNumber() ||\n          currentTerm === \"+\" ||\n          currentTerm === \"*\" ||\n          currentTerm === \"/\"\n        ) {\n          setExpression([...expression, currentTerm]);\n        }\n        setCurrentTerm(input);\n        break;\n      case \"+\":\n      case \"x\":\n      case \"/\":\n        if (currentTermtingNumber()) {\n          setExpression([...expression, currentTerm]);\n        }\n        setCurrentTerm(input);\n        break;\n      default:\n        // currentTermting a number\n        if (currentTerm === \"0\") {\n          setCurrentTerm(input);\n        } else if (!currentTermtingNumber()) {\n          setExpression([...expression, currentTerm]);\n          setCurrentTerm(input);\n        } else {\n          setCurrentTerm(currentTerm + input);\n        }\n    }\n  };\n\n  const solve = stmt => {\n    // base case\n    if (stmt.length == 1) {\n      return parseFloat(stmt[0]);\n    }\n\n    const num = parseFloat(stmt.pop());\n    const op = stmt.pop();\n\n    switch (op) {\n      case \"+\":\n        return solve(stmt) + num;\n      case \"-\":\n        return solve(stmt) - num;\n      case \"x\":\n        stmt[stmt.length - 1] = parseFloat(stmt[stmt.length - 1]) * num;\n        return solve(stmt);\n      case \"/\":\n        stmt[stmt.length - 1] = parseFloat(stmt[stmt.length - 1]) / num;\n        return solve(stmt);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <ReactFCCTest />\n      <div className=\"calculator\">\n        <div id=\"display\">{expression.join(\" \") + \" \" + currentTerm}</div>\n        <Button id=\"clear\" text=\"AC\" clickHandler={handleClick2} />\n        <Button id=\"divide\" text=\"/\" clickHandler={handleClick2} />\n        <Button id=\"multiply\" text=\"x\" clickHandler={handleClick2} />\n        <Button id=\"seven\" text=\"7\" clickHandler={handleClick2} />\n        <Button id=\"eight\" text=\"8\" clickHandler={handleClick2} />\n        <Button id=\"nine\" text=\"9\" clickHandler={handleClick2} />\n        <Button id=\"subtract\" text=\"-\" clickHandler={handleClick2} />\n        <Button id=\"four\" text=\"4\" clickHandler={handleClick2} />\n        <Button id=\"five\" text=\"5\" clickHandler={handleClick2} />\n        <Button id=\"six\" text=\"6\" clickHandler={handleClick2} />\n        <Button id=\"add\" text=\"+\" clickHandler={handleClick2} />\n        <Button id=\"one\" text=\"1\" clickHandler={handleClick2} />\n        <Button id=\"two\" text=\"2\" clickHandler={handleClick2} />\n        <Button id=\"three\" text=\"3\" clickHandler={handleClick2} />\n        <Button id=\"equals\" text=\"=\" clickHandler={handleClick2} />\n        <Button id=\"zero\" text=\"0\" clickHandler={handleClick2} />\n        <Button id=\"decimal\" text=\".\" clickHandler={handleClick2} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}